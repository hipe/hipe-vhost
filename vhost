#!/usr/bin/envruby
require'rubygems'
require'pp'
require'fileutils'
load'./.vhost-conf'

unless$vhost_conf
puts"sorry.failedtoload$vhost_conffrom./.vhost-conf"
exit
end

conf=$vhost_conf

moduleMarkus

classVhostCliException<Exception
end

moduleDetailedException
defself.extend_object(base)
base.instance_evaldo
@__info={}
end
super
end
defmethod_missingname,*args,&blah
if/^(.+)=$/=~name.to_s
@__info[$1.to_sym]=args[0]
else
@__info[name.to_sym]
end
end
end

classVhostCli

definitialize(conf)
@actions=['list','add','configure','help','explain']
@conf=conf
end

#thankyouactionpack--butnoteitdoesn'tbreakuplongwordsbut
#whatever
defwordwrap(text,width)
text.split("\n").mapdo|line|
line.length>width?line.gsub(
/(.{1,#{width}})(\s+|$)/,"\\1\n").strip:line
end*"\n"
end

defindent(text,margin,width)
wordwrap(text,width).gsub(/\n/,"\n"+(''*margin))
end

defrun(argv)
if(!argv[0]||!@actions.include?(argv[0]))
putstext_for_usage
exit
end
action=argv.shift
action=helpif(['-h','--help'].include?(action))
meth='execute_'+action
send(meth,argv)
end

defprogram_name
File.basename$PROGRAM_NAME
end

defexecute_help(args)
printtext_for_usage+"\n\n"
exit
end

deftext_for_usage
<<-END.gsub(/^{8}/,'')
Addvirtualhosts.

Usage:#{program_name}COMMAND[ARGUMENTS]

Commands:
helpshowthisscreen
explainexplainsthestepsinvolvedinaddingavirtualhost
--youshouldunderstandthisbeforeusingthisscript
listlisttheexistingvhostentriesandsummaryinfoabout
them
addNAMEaddavirtualhostnamednametotherelevantplaces,
restartapache.
configure(notyetimplemented!)
END
end

deftext_for_description
<<-END.gsub(/^{8}/,'')
HOWTOADDAVIRTUALHOST(thereallyshortversion):
1)$locatehttpd.conf#thenjumptotherelevantlinesattheend
2)copypasteanewvirtualhostsectionintothefile-or-
addsuchvhostconfigfileintoafolderthatgetsInclude'd
3)$locate/etc/hosts#findtherightfile,it'susuallythisone
4)copypasteyourline
5)apachectlstop
6)apachectlstart
END
end

defmake_backup_of_fileorig_path
append=Time.now.strftime('%Y-%m-%d_%H:%M:%S')
new_name=%{#{orig_path}.bak.#{append}}
i=1
whileFile.exist?new_name#veryunlikely
new_name=%{#{orig_path}.bak.#{append}.#{i}}
i+=1
end
begin
FileUtils.copy_fileorig_path,new_name
rescueErrno::EACCES=>e
e.extendDetailedException
e.filename=new_name
raisee
end
puts"madebackupcopy:#{new_name}"
end

defentries_from_httpd_conf

#getallthevirtualdomainsnamesthataredefinedinyourhttpd.conffile
contents=nil
File.open(@conf[:httpd_conf_path],'r'){|fh|contents=fh.read}
vh='VirtualHost'
names1=contents.scan(%r{^<#{vh}[^>]*>((?:.(?!</#{vh}>))*.)}m).map{
|x|x[0].scan(%r{\bServerName+([^[:space:]]+)})[0][0]
}
#getallthevirtualdomainsdefinedintheirownfilesthatare
#Include'dbytheabovefile
vhost_folder=@conf[:vhost_folder]
re=%r{Include#{vhost_folder}\*\.conf}
unlessre.matchcontents
msg=%{implementthis,sorry!No'Include"#{@conf[:vhost_folder]}*.conf"'}+
%{foundin#{@conf[:httpd_conf_path]}}
raiseVhostCliException.newmsg
end
dir=Dir.new(vhost_folder)#raisesErrno::ENOENTwhennotexist
names2=dir.grep(%r{\.conf$}).map{|x|x.scan(%r{^(.+)\.conf$})[0][0]}
ret=names1|names2
end

defentries_from_hosts
matches=nil
File.open(@conf[:hosts_path],'r'){|fh|
matches=fh.read.scan(
%r{127\.0\.0\.1\s+([[:print:]]+)[\s\t]*$}).map{|x|x[0]}
}
matches
end

defhosts_info
hosts=entries_from_hosts
confs=entries_from_httpd_conf
hosts.delete('localhost')#right?
names=hosts|confs
items=names.mapdo|name|
h=hosts.include?name
c=confs.include?name
{:name=>name,:in_hosts=>h,:in_conf=>c}
end
items.sort!{|a,b|a[:name]<=>b[:name]}
items
end

defexecute_explainargv
putstext_for_description
end

defexecute_listargv
@linewidth=80
@margin=34
@_2nd_col=@linewidth-@margin

puts%{Vhostsfolder:#{@conf[:vhost_folder]}}
puts%{Hostsfile:#{@conf[:hosts_path]}}
puts"Informationaboutknownvirtualhosts:"

msg1='missingentryin'+@conf[:vhost_folder]+
'or'+@conf[:httpd_conf_path]

msg2='alsomissingfrom'+File.basename(@conf[:httpd_conf_path])
msg3='missingentryin'+@conf[:httpd_conf_path]

hosts_info.eachdo|item|
lines=[]
unlessitem[:in_hosts]
lines<<indent(msg1||msg2,@margin,@_2nd_col)
msg1=nil
end
unlessitem[:in_conf]
lines<<indent(msg3,@margin,@_2nd_col)
end
desc=lines*'.'
desc='ok'ifdesc.empty?
puts%{#{sprintf('%-30s',item[:name])}#{desc}}
end
end

#wishingfor1.9.
#return[key_names,as_hash]
defhashize(list,key_name)
as_hash={}
names=[]
list.eachdo|item|
names<<item[key_name]
as_hash[item[key_name]]=item
end
[names,as_hash]
end

defexecute_addargv
err=caseargv.length;when0:"toofewarguments.";when1:nil;else"toomanyarguments.";end
iferr
s=<<-END.gsub(/^{6}/,'')
#{err}
Usage:#{program_name}addDOMAIN
END
putss
return
end
@name=argv.shift
name=@name
names,hash=hashize(hosts_info,:name)
ifhash[name]
entry=hash[name]
do_etc_hosts=!entry[:in_hosts]
do_config=!entry[:in_conf]
else
do_etc_hosts=true
do_config=true
end
if(!do_etc_hosts&&!do_config)
puts%{"#{name}"alreadyseemstoexistin#{@conf[:hosts_path]}and#{@conf[:vhost_folder]}}
return
end
begin
add_to_etc_hostsifdo_etc_hosts
add_to_configifdo_config
make_docroot_and_first_file_if_necessary
rescueErrno::EACCES=>e
file=e.filename||'file'
e.filename='blearg'
puts%{Sorry,couldn'tmake#{file}.Doyouneedtorunthiswithsudo?#{e.message}}
exit
end
restart_apache
add_directory_to_shortcuts_thing
puts"trygoingtohttp://#{name}/"
end

defadd_to_etc_hosts
name=@name
make_backup_of_file@conf[:hosts_path]
raiseVhostCliException.new("wedon'llikethisname")unless(name=~/^[-a-z_0-9\.]{1,}$/)
File.open(@conf[:hosts_path],'a+')do|fh|
fh.seek(0,IO::SEEK_END)
fh.puts%{127.0.0.1#{name}}
puts%{Added"#{name}"to#{@conf[:hosts_path]}}
end
end

defrestart_apache
`sudohttpd-kgraceful`
end

defadd_directory_to_shortcuts_thing
#nope--thing
end

#notrailingslash
defget_doc_root
@conf[:sites_folder]+'/'+@name+@conf[:docroot_append]
end

defadd_to_config
name=@name
doc_root=get_doc_root
content=<<-END.gsub(/^{8}/,'')
<VirtualHost127.0.0.1>
DocumentRoot"#{doc_root}"
ServerName"#{name}"
<Directory"#{doc_root}">
AllowOverrideAll
		AllowfromAll
</Directory>
</VirtualHost>
END
new_file=@conf[:vhost_folder]+name+'.conf'
raiseVhostCliException.new("filealreadyexists!")ifFile.exist?(new_file)#shouldn'teverhappenpercaller
File.open(new_file,'a+')do|fh|
fh.writecontent
puts%{Addedfile:#{new_file}}
end
end#enddefadd_to_config

defmake_docroot_and_first_file_if_necessary
docroot=get_doc_root
begin
FileUtils.mkdir(docroot,:mode=>0755,:verbose=>1)
rescueException=>e
e.extendDetailedException
e.filename=docroot
puts"zokweareok:"+e.filename
exit
raisee
end
fn=docroot+'/index.html'
unless(File.exist?fn)
File.open(fn,'a+')do|fh|
fh.write<<-END.gsub(/^+/,'')
<!DOCTYPEhtml><html><head><title>@name</title>
<styletype="text/css">
body{font-family:sans-serif;background-color:#6cc5c3;}
h1,h2,h3,h4,h5{text-align:center;background-color:#f05921;color:#ffffff;
-webkit-border-radius:8px;/*forSafari*/
-moz-border-radius:8px;/*forFirefox*/
padding:.23em;
text-shadow:0010px#000000;
}
</style>
</head><body>
<h1>welcometo#{@name}</h1>
</body></html>
END
end
puts%{Wrote#{fn}.}
end
end#endmake_docroot_and_first_file_if_necessary
end#endclassVhostCli
end#endmoduleMarkus

Markus::VhostCli.new(conf).run(ARGV)
